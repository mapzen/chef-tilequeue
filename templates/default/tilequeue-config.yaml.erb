queue:
<%- for queue_cfg in node[:tilequeue][:queue] -%>
  - type: <%= queue_cfg[:type] %>
    name: <%= queue_cfg[:name] %>
<%- if queue_cfg[:type] == 'sqs' -%>
    sqs:
      region: <%= queue_cfg[:region] %>
<%- end -%>
<%- end -%>
queue-mapping:
  type: <%= node[:tilequeue][:queue_mapping][:type] %>
<%- if node[:tilequeue][:queue_mapping][:type] == 'multiple' -%>
  multiple:
<%- for qm_cfg in node[:tilequeue][:queue_mapping][:multiple] -%>
    - queue-name: <%= qm_cfg[:queue_name] %>
<%- if qm_cfg[:start_zoom] -%>
      start-zoom: <%= qm_cfg[:start_zoom] %>
<%- end %>
<%- if qm_cfg[:end_zoom] -%>
      end-zoom: <%= qm_cfg[:end_zoom] %>
<%- end %>
<%- if qm_cfg[:group_by_zoom] -%>
      group-by-zoom: <%= qm_cfg[:group_by_zoom] %>
<%- end %>
<%- end %>
<%- end %>
message-marshall:
  type: <%= node[:tilequeue][:message_marshall][:type] %>
in-flight:
  type: <%= node[:tilequeue][:in_flight][:type] %>
message-tracker:
  type: <%= node[:tilequeue][:message_tracker][:type] %>
message-visibility:
  extend-seconds: <%= node[:tilequeue][:message_visibility][:extend_seconds] %>
  max-seconds: <%= node[:tilequeue][:message_visibility][:max_seconds] %>
  timeout-seconds: <%= node[:tilequeue][:message_visibility][:timeout_seconds] %>
store:
  type: <%= node[:tilequeue][:store][:type] %>
  name: <%= node[:tilequeue][:store][:name] %>
  path: <%= node[:tilequeue][:store][:path] %>
  date-prefix: <%= node[:tilequeue][:store][:date_prefix] %>
  reduced-redundancy: <%= node[:tilequeue][:store][:reduced_redundancy] %>
aws:
  credentials:
    aws_access_key_id: <%= node[:tilequeue][:aws][:credentials][:aws_access_key_id] %>
    aws_secret_access_key: <%= node[:tilequeue][:aws][:credentials][:aws_secret_access_key] %>
tiles:
  seed:
    <%- if node[:tilequeue][:tiles][:all][:enabled] -%>
    all:
      zoom-start: <%= node[:tilequeue][:tiles][:all][:zoom_start] %>
      zoom-until: <%= node[:tilequeue][:tiles][:all][:zoom_until] %>
    <%- end -%>
    <%- if node[:tilequeue][:tiles][:metro_extract][:enabled] -%>
    metro-extract:
      url: <%= node[:tilequeue][:tiles][:metro_extract][:url] %>
      zoom-start: <%= node[:tilequeue][:tiles][:metro_extract][:zoom_start] %>
      zoom-until: <%= node[:tilequeue][:tiles][:metro_extract][:zoom_until] %>
    <%- end -%>
    <%- if node[:tilequeue][:tiles][:top_tiles][:enabled] -%>
    top-tiles:
      url: <%= node[:tilequeue][:tiles][:top_tiles][:url] %>
      zoom-start: <%= node[:tilequeue][:tiles][:top_tiles][:zoom_start] %>
      zoom-until: <%= node[:tilequeue][:tiles][:top_tiles][:zoom_until] %>
    <%- end -%>
    <%- if node[:tilequeue][:tiles][:custom][:enabled] -%>
    custom:
      zoom-start: <%= node[:tilequeue][:tiles][:custom][:zoom_start] %>
      zoom-until: <%= node[:tilequeue][:tiles][:custom][:zoom_until] %>
      bboxes: <%= node[:tilequeue][:tiles][:custom][:bboxes] %>
    <%- end -%>
    should-add-to-tiles-of-interest: <%= node[:tilequeue][:tiles][:should_add_to_tiles_of_interest] %>
process:
  n-simultaneous-query-sets: <%= node[:tilequeue][:process][:n_simultaneous_query_sets] %>
  n-simultaneous-s3-storage: <%= node[:tilequeue][:process][:n_simultaneous_s3_storage] %>
  log-queue-sizes: <%= node[:tilequeue][:process][:log_queue_sizes] %>
  log-queue-sizes-interval-seconds: <%= node[:tilequeue][:process][:log_queue_sizes_seconds] %>
  query-config: <%= node[:tilequeue][:vector_datasource][:path] %>/queries.yaml
  template-path: <%= node[:tilequeue][:vector_datasource][:path] %>/queries
  reload-templates: false
  formats: <%= node[:tilequeue][:process][:formats] %>
<%- if node[:tilequeue][:process][:buffer] -%>
  buffer:
  <%- node[:tilequeue][:process][:buffer].each do |fmt_ext, fmt_data| -%>
    <%= fmt_ext %>:
      <%- if fmt_data['layer'] -%>
      layer:
      <%- fmt_data['layer'].each do |layer_name, layer_data| -%>
        <%= layer_name %>:
          <%- layer_data.each do |geom_type, value| -%>
          <%= geom_type %>: <%= value %>
          <%- end -%>
      <%- end -%>
      <%- end -%>
      <%- if fmt_data['geometry'] -%>
      geometry:
        <%- fmt_data['geometry'].each do |geom_type, value| -%>
        <%= geom_type %>: <%= value %>
        <%- end -%>
      <%- end -%>
  <%- end -%>
<%- end -%>
  yaml:
    type: parse
    parse:
      path: <%= node[:tilequeue][:vector_datasource][:path] %>/yaml
logging:
  config: <%= node[:tilequeue][:logging][:config] %>
redis:
  host: <%= node[:tilequeue][:redis][:host] %>
  port: <%= node[:tilequeue][:redis][:port] %>
  db: <%= node[:tilequeue][:redis][:db] %>
postgresql:
  host: <%= node[:tilequeue][:postgresql][:host] %>
  port: 5432
  dbnames: <%= node[:tilequeue][:postgresql][:dbnames] %>
  user: <%= node[:tilequeue][:postgresql][:user] %>
  password: <%= node[:tilequeue][:postgresql][:password] %>
wof:
  neighbourhoods-meta-url: <%= node[:tilequeue][:wof][:meta_url][:neighbourhoods] %>
  microhoods-meta-url: <%= node[:tilequeue][:wof][:meta_url][:microhoods] %>
  macrohoods-meta-url: <%= node[:tilequeue][:wof][:meta_url][:macrohoods] %>
  boroughs-meta-url: <%= node[:tilequeue][:wof][:meta_url][:boroughs] %>
  data-prefix-url: <%= node[:tilequeue][:wof][:data_prefix_url] %>
  max-retries: <%= node[:tilequeue][:wof][:max_retries] %>
  postgresql:
    host: <%= node[:tilequeue][:wof][:postgresql][:host] %>
    port: 5432
    dbname: <%= node[:tilequeue][:wof][:postgresql][:dbname] %>
    user: <%= node[:tilequeue][:wof][:postgresql][:user] %>
    password: <%= node[:tilequeue][:wof][:postgresql][:password] %>
<%- if node[:tilequeue][:metatile][:enabled] -%>
metatile:
  size: <%= node[:tilequeue][:metatile][:size] %>
<%- end -%>
<%- if node[:tilequeue][:toiprune][:enabled] -%>
toi-prune:
  tile-history:
    database-uri: <%= node[:tilequeue][:toiprune][:redshift][:database_uri] %>
    days: <%= node[:tilequeue][:toiprune][:redshift][:days] %>
    max-zoom: <%= node[:tilequeue][:toiprune][:redshift][:max_zoom] %>
  cutoff:
    min-requests: <%= node[:tilequeue][:toiprune][:cutoff][:min_requests] %>
    max-tiles: <%= node[:tilequeue][:toiprune][:cutoff][:max_tiles] %>
  s3:
    bucket: <%= node[:tilequeue][:toiprune][:s3][:bucket] %>
    date-prefix: <%= node[:tilequeue][:toiprune][:s3][:date_prefix] %>
    path: <%= node[:tilequeue][:toiprune][:s3][:path] %>
    layer: <%= node[:tilequeue][:toiprune][:s3][:layer] %>
    format: <%= node[:tilequeue][:toiprune][:s3][:format] %>
  always-include:
<%- node[:tilequeue][:toiprune][:always_include].each do |name, data| -%>
    <%= name %>:
      <%- data.each do |key, value| -%>
      <%= key %>: <%= value %>
      <%- end -%>
<%- end -%>
<%- end -%>
<%- if node[:tilequeue][:statsd][:enabled] -%>
statsd:
  host: <%= node[:tilequeue][:statsd][:host] %>
  port: <%= node[:tilequeue][:statsd][:port] %>
  prefix: <%= node[:tilequeue][:statsd][:prefix] %>
<%- end -%>
toi-store:
  type: <%= node[:tilequeue][:toistore][:type] %>
  s3:
    bucket: <%= node[:tilequeue][:toistore][:s3][:bucket] %>
    key: <%= node[:tilequeue][:toistore][:s3][:key] %>
  file:
    name: <%= node[:tilequeue][:toistore][:file][:name] %>
rawr:
  # this is the parent zoom level that coordinates are expected to be grouped under
  group-zoom: <%= node[:tilequeue][:rawr][:group_zoom] %>
  queue:
    name: <%= node[:tilequeue][:rawr][:queue][:name] %>
    wait-seconds: <%= node[:tilequeue][:rawr][:queue][:wait_seconds] %>
    region: <%= node[:tilequeue][:rawr][:queue][:region] %>
  postgresql:
    host: <%= node[:tilequeue][:rawr][:postgresql][:host] %>
    port: 5432
    dbname: <%= node[:tilequeue][:rawr][:postgresql][:dbname] %>
    user: <%= node[:tilequeue][:rawr][:postgresql][:user] %>
    password: <%= node[:tilequeue][:rawr][:postgresql][:password] %>
  sink:
    bucket: <%= node[:tilequeue][:rawr][:sink][:bucket] %>
    region: <%= node[:tilequeue][:rawr][:sink][:region] %>
    prefix: <%= node[:tilequeue][:rawr][:sink][:prefix] %>
    suffix: <%= node[:tilequeue][:rawr][:sink][:suffix] %>
  source:
    type: <%= node[:tilequeue][:rawr][:source][:type] %>
    table-sources:
      planet_osm_line: &osm { name: osm, value: openstreetmap.org }
      planet_osm_point: *osm
      planet_osm_polygon: *osm
      planet_osm_ways: *osm
      planet_osm_rels: *osm
    s3:
      bucket: <%= node[:tilequeue][:rawr][:source][:bucket] %>
      region: <%= node[:tilequeue][:rawr][:source][:region] %>
      prefix: <%= node[:tilequeue][:rawr][:source][:prefix] %>
      suffix: <%= node[:tilequeue][:rawr][:source][:suffix] %>
use-rawr-tiles: <%= node[:tilequeue][:rawr][:use_rawr_tiles] %>
